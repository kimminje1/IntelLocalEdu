제어자(Modifier).txt

캡슐화(encapsulation)->정보 은닉, 보안



클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다

*제어자의 종류

접근제어자-public,protected,default,private
그 외-static,final,abstract,native,trasient,synschronized,
volatile 등

제어자는 클래스나 멤버에 주로 사용되며, 하나의 대상에 대해서 여러 제어자를 조합하여
사용하는 것이 가능하다
단,접근 제어자는 하나만 선택해서 사용할 수 있다.

1.static

인스턴스를 생성하지 않고도 호출이 가능한 메서드가 된다

2.final(마지막의, 변경될 수 없는) //ex final class
사용가능한 곳-클래스, 메서드, 멤버변수, 지역변수

클래스: 변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다 /상속x
그래서 final로 지정된 클래스는 다른 클래스의 부모가 될 수 없다
메서드:변경될 수 없는 메서드,final로 지정된 메서드는 오버라이딩을 통해
재정의 될 수 없다
멤버 및 지역변수: 변수 앞에 final이 붙으면, 값을 변경할 수 없는 상수가 된다


???에 사용가능한 접근 제어자
클래스 - public, default
메서드,멤버변수 -4개 전부
지역변수- 아무것도 못씀

*접근 제어자를 사용하는 이유
-외부로부터 데이터를 보호하기 위해서
-외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서