패키지.txt

패키지 == 폴더
폴더 별로 묶어서 클래스들을 관리한다


패키지란
클래스의 묶음이다
서로 관련된 클래스들끼리 그룹 단위로 묶어 놓음으로써
클래스를 효율적으로 관리할 수 있다

이는 다른 개발자가 개발한 클래스 라이브러리의 클래스와 이름이 충돌하는 것을 피할 수 있다
//패키지.클래스
클래스의 실제 이름(full Name)은 패키지명을 포함한 것이다
============
같은 이름의 클래스일지라도 서로 다른 패키지에 속하면 패지키명으로 구별이 가능하다

클래스가 물리적으로 하나의 클래스파일(.class)인 것과 같이 패키지는 물리적으로
하나의 디렉토리이다.

-하나의 소스파일에는 첫 번째 문장으로 단 한번의 패키지 선언만을 허용한다
-모든 클래스는 반드시 하나의 패키지에 속해야 한다
-패키지는 점(.)을 구분자로 하여 계층구조(계단식)로 구성할 수 있다
-패키지는 물리적으로(.class)를 포함하는 하나의 디렉토리이다

*패키지 선언
표현식
package 패키지명;
클래스, c 소스->파일

패키지 선언문은 반드시 소스파일 첫 번째 문장에 작성해야 한다
하나의 소스 파일에는 단 한번만 선언될 수 있다
패키지명은 대소문자를 모두 허용하지만 클래스명과 구분하기 위해서
소문자로 하는 것을 원칙으로 한다
**이름없는 패키지는 현업에선 존재하지않는다

*import문
소스코드를 작성할 때 다른 패키지의 클래스를 사용하려면 패키지명이 포함된
클래스 이름을 사용해야 한다
매번 패키지명을 붙여서 작성하기는 불편하기 때문에
다른 패키지의 클래스의 코드를 작성하기 전에 import문으로 사용하고자 하는
클래스의 패키지를 미리 명시해주면 소스코드에 사용되는 클래스이름에서 패지키명은 생략할 수 있다

crtl+shift+ o:자동 import 수행

*import 선언
일반적으로 소스파일(*java)의 구성은 다음의 순서로 구성된다
1.package문
2.import문
3.클래스 선언문

하나의 클래스만 불러오고 싶은 경우:import 패키지명,클래스명;
또는
패키지에 속한 모든 클래스를 불러오고 싶은 경우:import 패키지명.*;

오류날때 delete project

