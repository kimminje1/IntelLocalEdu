예외처리.txt

예외처리(Exception Handling)

프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있다.
이러한 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 한다.

*발생시점에 따라
컴파일 에러(comlile-time error)와 런타임 에러(runtime error)로 나눈다

*컴파일 에러
컴파일 할 때 발생하는 에러
코드를 작성 중  오류가 난 경우
컴파일을 성공적으로 마쳐야 클래스 파일이 생성되고, 생성된 클래스 파일을 실행할 수 있게 된다

*런타임 에러
프로그램의 실행도중에 발생하는 에러


*논리적 에러(logical error)
컴파일 및 실행 Ok, 의도한 것과 다르게 동작하는 상황

실행 도중에 발생할 수 있는 잠재적인 오류까지 검사할 수 없기 때문에
컴파일은 잘 되었어도 실행 중에 에러에 의해서 잘못된 결과를 얻거나
프로그램이 비정상적으로 종료될 수 있다

프로그램이 갑자기 실행을 멈추고 종료되는 경우 등이 이런 경우이다.
자바에서는 실행 시 발생할 수 있는 프로그램 오류를
에러와 예외 두가지로  구분한다

*에러
메모리 부족이나 스택오버플로우와 같이 일단 발생하면 복구할 수 없는
심각한 오류


*예외
발생하더라도 수습될 수 있는 비교적 덜 심각한 것

에러가 발생하면 프로그램의 비정상적인 종료를 막을 길이 없지만
예외는 발생하더라도 프로그래머가 이에 대한 적절한 코드를 미리 작성해 놓음으로써
프로그램의 비정상적인 종료를 막을 수 있다


RuntimeException클래스들은
주로 프로그래머의 실수에 의해서 발생될 수 있는 예외들이다.
예를 들면 배열의 범위를 벗어난다던가 하는 경우에 발생한다

Exception클래스들은 주로 외부의 영향으로 발생할 수 있는 것들로
프로그램의 사용자들의 동작에 의해서 발생하는 경우가 많다
예를 들면, 존재하지 않는 파일의 이름을 입력했다던가
실수로 키보드로 숫자만 입력해야 하는데 글자를 입력한 경우에 발생한다
사용자 실수와 같은 외적인 요인

*예외처리하기

에러는 어쩔수 없지만 예외는 프로그래머가 이에 대한 처리를 미리 해주어야 한다
그래야 프로그램이 정상적인 실행상태를 유지할 수있다

*예외처리 정의
정의 -프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

표현식
try{
	예외가 발생할 가능성이 있는 문장들을 적는다
} catch(예외가능 클래스 변수명1){
	예외가 발생했을 경우, 이를 처리하기 위한 문장을 적는다
}	catch(예외가능 클래스 변수명2){
	예외가 발생했을 경우, 이를 처리하기 위한 문장을 적는다
} 필요한 만큼 catch문 선언

finally{
	예외의 발생여부에 관계없이 항상 수행되어야 하는 문장들을 넣는다
	무조건 수행되어야 하는 코드?
	메모리 누수를 막아야 하는 코드
	개발자 코드 정리
	업무적으로 무조건 처리하는 코드
}

-ExceptionEx4 내용
예외가 발생하면 발생한 예외에 해당하는 클래스의 인스턴스가 만들어 진다
여기서는 NullPointerException이 발생했으므롤 널포인터익셉션 인스턴스가 생성된다
모든 예외클래스는 Exception 클래스의 자식이므로
catch블럭의 괄호에 Exception클래스를 선언해 놓으면 어떤 종류의 예외가 발생하더라도
이 catch블럭에 의해서 처리된다


e.printStackTrace():예외발생 당시의 호출스택에 있었던 메서드의 정보와
예외 메세지를 화면에 출력한다(개발자용)

e.getMessage():발생한 예외클래스의 인스턴스에 저장된 메세지를 얻을 수 있다(사용자용)


//	메서드에 예외 선언하기
메서드의 선언부에 키워드 throws를 사용해서 메서드 내에 발생할 수 있는 예외를
적어주면 된다
예외가 여러 개인 경우 쉼표(,)로 구분한다
void method1() throws ArithmeticException{
		메서드 내용
}
ex)
ExceptionEx7Class ex7= new ExceptionEx7Class();
		try {
			ex7.method1();
		} catch (ArithmeticException e) {
			// TODO: handle exception
		} 이런식으로~
void method1() throws 예외1, 예외2, ,,,, Exception{
		메서드 내용
}

메서드의 선언부에 예외를 선언함으로써 메서드를 사용하려는 개발자가
메서드의 선언부를 보았을 때, 이 메서드를 사용하기 위해서는
어떠한 예외들이 처리되어야 하는지 쉽게 알수 있다.
