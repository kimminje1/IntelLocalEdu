컬렉션 프레임워크.txt

Collection Framework

*정의
데이터 군을 저장하는 클래스들을 표준화한 설계를 뜻한다 
컬렉션은 다수의 데이터, 즉 데이터 그룹을 
프레임웤은 표준화된 프로그래밍 방식을 의미한다

컬렉션의 핵심 인터페이스
컬렉션(데이터 그룹)을 크게 3가지 타입이 존재한다고 인식하고 각 컬렉션을 다루는데 
필요한 기능을 가진 3개의 인터페이스를 정의하였다

인터페이스 List와 Set을 구현한 컬랙션 클래스들은 서로 많은 공통부분이 있어서
공통된 부분을 다시 뽑아 Collection 인터페이스를 정의했다
Map 인터페이스는 이들과는 전혀 다른 형태로 컬렉션을 다루기 때문에 같은
상속계층도에 포함되지 못했다

상속계층도
List extends Collection
Set extends Collection
Map

인터페이스          		특징
List		순서가 있는 데이터의 집합, 데이터의 중복을 허용한다		
			ex: 대기자 명단
			구현클래스: ArrayList, Stack 등
Set			순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않는다
			ex: 양의 정수집합, 소수의 집합
			구현클래스: HashSet, TreeSet 등
Map			키(Key)와 값(Value)의 쌍(Pair)으로 이루어진 데이터의 집합, 
			순서는 유지되지 않으며,
			키는 중복을 허용하지 않고, 
			값은 중복을 허용한다
			ex: 우편번호, 지역번호(전화번호)
			구현클래스: HashMap, HashTable, Properties 등
			
		제너릭스 or 지네릭스	(Generics)	
List<Integer> list1 =new ArrayList<Integer>(5);

<Integer>->이부분이 제너릭스
제너릭스는 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클레스에 컴파일 시의 타입체크를
해주는 기능이다.
객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어든다

제너릭의 장점
코드가 간결해진다


고정->배열 크기 3으로지정시 3으로만 수행됨
가변->List add하면 배열크기를 자동적으로 확장함

// Iterator //그냥하나씩끄집어내는개념

컬렉션 프레임웍에서는 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화하였다
컬렉션에 저장된 각 요소에 접근하는 기능을 가진  Iterator 인터페이스를 정의하고
Collection인터페이스에는 Iterator를 구현한 클래스의 인스턴스를 반환하는
Iterator()을 정의하고 있다

Iterator를 얻은 다음 반복문 주로, while문을 사용해서
컬렉션 클래스의 요소들을 읽어 올 수 있다


		